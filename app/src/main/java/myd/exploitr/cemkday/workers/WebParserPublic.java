package myd.exploitr.cemkday.workers;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.util.Objects;
import java.util.concurrent.TimeUnit;

import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class WebParserPublic {

    private static final String att_link = "https://www.cemkolaghat.org/student-attendance.aspx";

    private static String[] paramValues = new String[6];
    private OkHttpClient client;
    private Runner runner;

    public void start(Runner runner_) throws Exception {
        client = new OkHttpClient.Builder()
                .followRedirects(false)
                .connectTimeout(1, TimeUnit.MINUTES)
                .callTimeout(1, TimeUnit.MINUTES)
                .readTimeout(1, TimeUnit.MINUTES)
                .writeTimeout(1, TimeUnit.MINUTES)
                .followSslRedirects(true)
                .build();
        this.runner = runner_;
        startInternal();
    }

    private void startInternal() throws Exception {
        Request request = new Request.Builder()
                .url(att_link)
                .get()
                .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0")
                .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
                .addHeader("Accept-Language", "en-US,en;q=0.5")
                .addHeader("Connection", "close")
                .addHeader("Referer", "https://www.cemkolaghat.org/")
                .addHeader("Upgrade-Insecure-Requests", "1")
                .build();
        Response response = null;
        try {
            response = client.newCall(request).execute();
        } catch (Exception e) {
            runner.onError();
            e.printStackTrace();
        }
        if (response != null) {
            if (response.body() != null) {
                obtainCookieAndGo(Objects.requireNonNull(response.body()).string());
            } else {
                runner.onError();
            }
        } else {
            runner.onError();
        }
    }


    private void obtainCookieAndGo(String response) {
        try {
            Document doc = Jsoup.parse(response);
            paramValues[0] = doc.select("input").first().val();
            paramValues[1] = doc.select("input").get(1).val();
            paramValues[2] = doc.select("input").get(2).val();
            paramValues[5] = "Submit"; //What the hell?
        } catch (Exception e) {
            runner.onError();
        }

        paramValues[3] = String.valueOf(Params.sub_it.value);
        paramValues[4] = "4";

        try {
            fetchAttendanceResult();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

   /* private void getCookieAndGo() throws Exception {
        RequestBody formBody = new FormBody.Builder()
                .add(Params.one.data, paramValues[0])
                .add(Params.two.data, paramValues[1])
                .add(Params.three.data, paramValues[2])
                .add(Params.four.data, paramValues[3])
                .add(Params.five.data, paramValues[4])
                .add(Params.six.data, paramValues[5])
                .build();

        Request request = new Request.Builder()
                .url(att_link)
                .post(formBody)
                .header("Host", "www.cemkolaghat.org")
                .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0")
                .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,[STAR]/[STAR];q=0.8")
                .header("Accept-Language", "en-US,en;q=0.5")
                .header("Accept-Encoding", "gzip,deflate")
                .header("Referer", "https://www.cemkolaghat.org/")
                .header("Content-Type", "application/x-www-form-urlencoded")
                .header("Content-Length", String.valueOf(
                        paramValues[0].length() + paramValues[1].length() + paramValues[2].length()
                                + paramValues[3].length() + paramValues[4].length() + paramValues[5].length()
                ))
                .header("Connection", "close")
                .header("Upgrade-Insecure-Requests", "1")
                .build();

        Response response = null;
        try {
            response = client.newCall(request).execute();
        } catch (Exception e) {
            e.printStackTrace();
            runner.onError();
        }

        if (response != null) {
            COOKIE = response.header("Set-Cookie");
        } else {
            runner.onError();
        }
        runner.onCheckComplete(COOKIE == null);
        fetchAttendanceResult();
    }*/

    private void fetchAttendanceResult() throws Exception{
        RequestBody formBody = new FormBody.Builder()
                .add(Params.one.data, paramValues[0])
                .add(Params.two.data, paramValues[1])
                .add(Params.three.data, paramValues[2])
                .add(Params.four.data, paramValues[3])
                .add(Params.five.data, paramValues[4])
                .add(Params.six.data, paramValues[5])
                .build();

        Request request = new Request.Builder()
                .url(att_link)
                .post(formBody)
                .header("Host", "www.cemkolaghat.org")
                .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0")
                .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
                .header("Accept-Language", "en-US,en;q=0.5")
                .header("Content-Type", "application/x-www-form-urlencoded")
                .header("Content-Length", "1193")
                .header("Origin", "https://www.cemkolaghat.org")
                .header("Connection", "close")
                .header("Referer", att_link)
                .header("Upgrade-Insecure-Requests", "1")
                .build();
        Response response = null;
        try {
            response = client.newCall(request).execute();
        } catch (Exception e) {
            runner.onError();
            e.printStackTrace();
        }
        if (response != null) {
            if (response.body() != null) {
                processAttendanceResult(Objects.requireNonNull(response.body()).string());
            } else {
                runner.onError();
            }
        } else {
            runner.onError();
        }
    }

    private void processAttendanceResult(String string) {
        Logger.log(string);
      /*  Document doc = null;
        try {
            doc = Jsoup.parse(string);
        } catch (Exception e) {
            e.printStackTrace();
            runner.onError();
        }
        Element table; //select the first table.
        Elements rows;
        if (doc != null) {
            table = doc.select("table").get(0);
            rows = table.select("tr");
        } else {
            runner.onError();
            return;
        }

        AttendanceData data = new AttendanceData();
        data.setCached(false);
        try {
            if (doc.select("span").get(1).text().equals("No Record Found")) {
                data.setAvailable(false);
                runner.onComplete(data);
                return;
            } else {
                data.setAvailable(true);
            }
        } catch (Exception e) {
            data.setAvailable(true);
        }
        Element rowSubsPre = rows.get(0);
        Elements rowSubsPost = rowSubsPre.select("th");
        for (int i = 1; i < rowSubsPost.size(); i++) {
            String heads = rowSubsPost.get(i).text();
            data.addSub(heads.contains("-") ? heads.split("-")[1].trim() : heads); // BS-M201 -> M201
        }

        String header;
        for (int i = 1; i < rows.size(); i++) {
            Element row = rows.get(i);
            Elements cols = row.select("td");

            header = cols.get(0).text();

            for (int z = 1; z < cols.size(); z++) {
                switch (header) {
                    case "Total Hours":
                        data.addHourTotal(Integer.parseInt(cols.get(z).text()));
                        break;
                    case "Hours Attended":
                        data.addHourObt(Integer.parseInt(cols.get(z).text()));
                        break;
                    case "Percentage":
                        data.addPercent(Float.parseFloat(cols.get(z).text()));
                        break;
                }
            }
        }
        runner.onComplete(data);*/
    }

    enum Params {
        one("__VIEWSTATE"),
        two("__VIEWSTATEGENERATOR"),
        three("__EVENTVALIDATION"),
        four("ctl00$ContentPlaceHolder1$ddldepartment"),
        five("ctl00$ContentPlaceHolder1$ddlSemester"),
        six("ctl00$ContentPlaceHolder1$btnsubmit"),

        sub_cse("Computer Science and Engineering", 5),
        sub_aeie("Applied Electronics and Instrumentation Engineering", 24),
        sub_ee("Electrical Engineering", 25),
        sub_ece("Electronic and Communication Engineering", 28),
        sub_it("Information Technology", 27),
        sub_me("Mechanical Engineering", 33);

        String data;
        int value;

        Params(String par) {
            this.data = par;
        }

        Params(String par, int par2) {
            this.data = par;
            this.value = par2;
        }
    }
}
