package myd.exploitr.cemkday.jobs;

import android.app.IntentService;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Build;
import android.os.IBinder;
import android.util.Log;

import androidx.annotation.Nullable;
import androidx.core.app.ServiceCompat;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;
import androidx.work.WorkManager;

import java.util.Objects;

import myd.exploitr.cemkday.R;
import myd.exploitr.cemkday.ui_access.MainActivity;
import myd.exploitr.cemkday.workers.DTM;

public class SupportService extends IntentService {

    public static boolean RUNNING = false;
    private static final String stopAction = "local.stop_action";
    NotificationManager notificationManager;
    StopServiceReceiver receiver;

    /**
     * Creates an IntentService.  Invoked by your subclass's constructor.
     */
    public SupportService() {
        super("CemkDayService");
    }

    @Override
    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {
        RUNNING = true;
        receiver = new StopServiceReceiver();

        PendingIntent pendingIntent = PendingIntent.getActivity(this, 1, new Intent(this, MainActivity.class), 0);
        PendingIntent stopIntent = PendingIntent.getBroadcast(this, 1, new Intent(this,StopServiceReceiver.class).setAction(stopAction), PendingIntent.FLAG_CANCEL_CURRENT);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            NotificationChannel notificationChannel = new NotificationChannel(
                    "CemkDay_notification",
                    "Wallpaper Switching Notification",
                    NotificationManager.IMPORTANCE_HIGH);

            if (notificationManager != null) {
                notificationManager.createNotificationChannel(notificationChannel);
            }

            Notification.Builder builder = new Notification.Builder(this.getBaseContext(), notificationChannel.getId())
                    .setContentTitle("CemkDay listening for attendance update.")
                    .setSmallIcon(R.drawable.ic_assignment)
                    .setContentText("Click to open!")
                    .addAction(new Notification.Action.Builder(null, "Stop", stopIntent).build())
                    .setContentIntent(pendingIntent)
                    .setOngoing(true);

            if (DTM.getInstance(getBaseContext()).isCycleForcedEnabled())
                startForeground("whatever".length(), builder.build());
        }
        DailyWorker.scheduleWork(this);
        LocalBroadcastManager.getInstance(getBaseContext()).registerReceiver(new StopServiceReceiver(), new IntentFilter(stopAction));
        return DTM.getInstance(getBaseContext()).isCycleForcedEnabled() ? Service.START_STICKY : Service.START_NOT_STICKY;
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    protected void onHandleIntent(@Nullable Intent intent) {
    }

    @Override
    public void onDestroy() {
        RUNNING = false;
        super.onDestroy();
    }

    @Override
    public void onTaskRemoved(Intent rootIntent) {
        RUNNING = false;
        WorkManager.getInstance(this).cancelAllWork();
        LocalBroadcastManager.getInstance(getBaseContext()).unregisterReceiver(receiver);
        super.onTaskRemoved(rootIntent);
    }
}
