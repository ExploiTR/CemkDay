package myd.exploitr.cemkday.jobs;

import android.app.Notification;
import android.content.Context;

import androidx.annotation.NonNull;
import androidx.work.BackoffPolicy;
import androidx.work.Constraints;
import androidx.work.ExistingPeriodicWorkPolicy;
import androidx.work.NetworkType;
import androidx.work.OneTimeWorkRequest;
import androidx.work.PeriodicWorkRequest;
import androidx.work.WorkManager;
import androidx.work.Worker;
import androidx.work.WorkerParameters;

import com.google.firebase.crashlytics.FirebaseCrashlytics;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import myd.exploitr.cemkday.attendance_objs.AttendanceData;
import myd.exploitr.cemkday.workers.DTM;
import myd.exploitr.cemkday.workers.Runner;
import myd.exploitr.cemkday.workers.WebParser;

public class DailyWorker extends Worker {

    private Context context;

    public DailyWorker(@NonNull Context appContext, @NonNull WorkerParameters workerParams) {
        super(appContext, workerParams);
        context = appContext;
    }

    public static void scheduleWork(Context context) {
        Constraints constraints = new Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build();

        PeriodicWorkRequest saveRequest =
                new PeriodicWorkRequest.Builder(DailyWorker.class, TimeUnit.HOURS.toMillis(DTM.getInstance(context).getCycleT_Hour())
                        + TimeUnit.MINUTES.toMillis(DTM.getInstance(context).getCycleT_Min()), TimeUnit.MILLISECONDS)
                        .setBackoffCriteria(
                                BackoffPolicy.LINEAR,
                                OneTimeWorkRequest.MIN_BACKOFF_MILLIS,
                                TimeUnit.MILLISECONDS)
                        .setConstraints(constraints)
                        .build();

        WorkManager.getInstance(context)
                .enqueueUniquePeriodicWork("Daily Work", ExistingPeriodicWorkPolicy.REPLACE, saveRequest);
    }

    @NonNull
    @Override
    public Result doWork() {
        checkState();
        try {
            new WebParser().start(
                    DTM.getInstance(context).getUname(),
                    DTM.getInstance(context).getPWD(),
                    new Runner() {
                        @Override
                        public void onComplete(AttendanceData data) {
                            AttendanceData old = DTM.getInstance(context).getLastSavedATD();
                            for (int i = 0; i < data.getSubLen(); i++) {
                                data.changeSub(i, old == null ? data.getSub(i) : old.getSub(i) == null ? data.getSub(i) : old.getSub(i));
                            }
                            DTM.getInstance(context).updateAttendanceData(data);
                        }

                        @Override
                        public void onCheckComplete(boolean isNull) {
                        }

                        @Override
                        public void onError() {

                        }
                    });
        } catch (Exception e) {
            e.printStackTrace();
            FirebaseCrashlytics.getInstance().log(Arrays.toString(e.getStackTrace()));
        }
        return Result.success();
    }

    private void checkState() {
        //check if daily is really requested
    }
}
