package myd.exploitr.cemkday.ui_access;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.LinearSmoothScroller;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.DisplayMetrics;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageButton;

import com.github.lzyzsd.circleprogress.ArcProgress;
import com.rom4ek.arcnavigationview.ArcNavigationView;

import java.util.ArrayList;
import java.util.Calendar;

import myd.exploitr.cemkday.R;
import myd.exploitr.cemkday.attendance_objs.AttendanceAdapter;
import myd.exploitr.cemkday.attendance_objs.AttendanceData;
import myd.exploitr.cemkday.attendance_objs.AttendanceItem;
import myd.exploitr.cemkday.attendance_objs.AttendanceRecyclerView;
import myd.exploitr.cemkday.jobs.DailyChecker;
import myd.exploitr.cemkday.workers.DTM;

public class MainActivity extends AppCompatActivity
		implements NavigationView.OnNavigationItemSelectedListener {
	
	public static final String ATTENDANCE_ITEM = "atm";
	ArcProgress progress;
	AttendanceRecyclerView recyclerView;
	AttendanceAdapter adapter;
	ImageButton error;
	boolean autoScrollable = true;
	DrawerLayout drawer;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		setupUI();
		setupConstraints();
		
		ArrayList<AttendanceItem> attendanceItems = new ArrayList<>();
		if (getIntent() != null) {
			AttendanceData data = (AttendanceData) getIntent().getSerializableExtra(ATTENDANCE_ITEM);
			if (data != null) {
				if (!data.isAvailable()) {
					new AlertDialog.Builder(MainActivity.this)
							.setTitle("Oops!")
							.setCancelable(false)
							.setMessage("Probably Attendance Data Not Available. Check out website & submit a bug report")
							.show();
					return;
				}
				progress.setProgress(
						(data.getHourObt(data.getSubLen() - 1) * 100) /
								data.getHourTotal(data.getSubLen() - 1));
				for (int i = 0; i < data.getSubLen(); i++) {
					attendanceItems.add(new AttendanceItem()
							.setSubject(data.getSub(i))
							.setHoursTotal(data.getHourTotal(i))
							.setHoursObtained(data.getHourObt(i))
							.setPercentInPoint((float) data.getHourObt(i) / data.getHourTotal(i))
					);
					recyclerView.setHasFixedSize(true);
					adapter = new AttendanceAdapter(this, attendanceItems);
					recyclerView.setAdapter(adapter);
					adapter.notifyDataSetChanged();
				}
				if (data.isCached()) {
					//io
					progress.setTextColor(Color.argb(255, 200, 255, 0));
					Calendar calendar = Calendar.getInstance();
					calendar.setTimeInMillis(DTM.getInstance(getBaseContext()).getLastCheckTimeStamp());
					
					//errorLevel notification
					error.setImageResource(R.drawable.ic_cached);
					error.setOnClickListener(cacheListener(calendar));
				} else {
					DTM.getInstance(getBaseContext()).setLastCheckTimeStamp(System.currentTimeMillis());
					DTM.getInstance(getBaseContext()).updateAttendanceData(data);
				}
				
				if (attendanceItems.get(attendanceItems.size() - 1).getPercentInPoint() < .75f) {
					//low attendance
					error.setImageResource(R.drawable.ic_low_attendance);
					error.setOnClickListener(lowAttendanceListener());
					progress.setTextColor(R.color.colorPrimarySettingAct);
				} else {
					if (!data.isCached())
						error.setVisibility(View.GONE);
				}
			}
		}
		if (DTM.getInstance(this).isCycleEnabled()) {
			DailyChecker.schedule(this);
		}
	}
	
	private View.OnClickListener lowAttendanceListener() {
		return v -> {
			if (!MainActivity.this.isFinishing()) {
				new AlertDialog.Builder(MainActivity.this)
						.setTitle("Low Attendance")
						.setMessage("As per University Rules, 75% attendance is the minimum required to sit for exam" +
								"\n\n! • Maintain proper attendance • !")
						.setPositiveButton("Understood", null)
						.show();
			}
		};
	}
	
	private View.OnClickListener cacheListener(Calendar calendar) {
		return v -> {
			if (!MainActivity.this.isFinishing()) {
				int hr = calendar.get(Calendar.HOUR_OF_DAY);
				int mn = calendar.get(Calendar.MINUTE);
				int sn = calendar.get(Calendar.SECOND);
				new AlertDialog.Builder(MainActivity.this)
						.setTitle("Limitations")
						.setMessage("Loading Cached Data from : " +
								(hr > 9 ? hr : "0" + hr) +
								":" +
								(mn > 9 ? mn : "0" + mn) +
								":" +
								(sn > 9 ? sn : "0" + sn) +
								"\n\n• To prevent unwanted spam, cyclical re-fetching of attendance data, data caching is implemented." +
								"\n\n• Also, no one is going to change attendance minute-by-minute. This will reduce server overhead too." +
								"\n\n• You can only refresh attendance data 24 times in a day with uniform time difference." +
								"\n\n• Additionally, the app checks the attendance at a specified certain time (Check Settings) and reports the changes." +
								"\n\n• The \'Circular Progress Text\' will have yellow color when the result is cached. & red when you got less than 75% of attendance.")
						.setPositiveButton("Understood", null)
						.show();
			}
		};
	}
	
	private void setupConstraints() {
		if (DTM.getInstance(getBaseContext()).isNewUser()) {
			recyclerView.post(() -> {
				if (adapter != null) {
					recyclerView.smoothScrollToPosition(adapter.getItemCount() - 1);
				}
				recyclerView.setLayoutManager(new LinearLayoutManager(MainActivity.this) {
					@Override
					public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {
						LinearSmoothScroller smoothScroller = new LinearSmoothScroller(MainActivity.this) {
							
							private static final float SPEED = 300f;// default=25f
							
							@Override
							protected float calculateSpeedPerPixel(DisplayMetrics displayMetrics) {
								return SPEED / displayMetrics.densityDpi;
							}
							
						};
						smoothScroller.setTargetPosition(position);
						startSmoothScroll(smoothScroller);
					}
					
					@Override
					public void onScrollStateChanged(int state) {
						if (state == RecyclerView.SCROLL_STATE_IDLE && autoScrollable) {
							recyclerView.smoothScrollToPosition(0); // ?
							autoScrollable = false;
							DTM.getInstance(getBaseContext()).setNewUserNoMore();
						}
						super.onScrollStateChanged(state);
					}
				});
			});
			new Handler().postDelayed(() -> {
				if (!MainActivity.this.isFinishing()) {
					new AlertDialog.Builder(MainActivity.this)
							.setTitle("Notice")
							.setMessage("This app doesn't depend on any official API based services.\n" +
									"Sometimes it may not work as expected (Mostly for unexpected changes in website).\n" +
									"Thanks for your patience!")
							.setPositiveButton("OK", null)
							.show();
				}
			}, 3000);
		} else {
			recyclerView.setLayoutManager(new LinearLayoutManager(MainActivity.this));
		}
	}
	
	private void setupUI() {
		Toolbar toolbar = findViewById(R.id.toolbar);
		setSupportActionBar(toolbar); //fix #46216551/8572503
		
		progress = findViewById(R.id.arc_progress);
		recyclerView = findViewById(R.id.recyclerAtt);
		error = findViewById(R.id.error);
		ArcNavigationView navigationView = findViewById(R.id.nav_view);
		drawer = findViewById(R.id.drawer_layout);
		
		ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
				this,
				drawer,
				toolbar,
				R.string.navigation_drawer_open,
				R.string.navigation_drawer_close);
		
		drawer.addDrawerListener(toggle);
		toggle.syncState();
		navigationView.setNavigationItemSelectedListener(this);
		navigationView.setItemIconTintList(null);
		
		toolbar.post(() -> toolbar.setSubtitle("Make Your Day At Cemk!"));
	}
	
	@Override
	public void onBackPressed() {
		if (drawer.isDrawerOpen(GravityCompat.START)) {
			drawer.closeDrawer(GravityCompat.START);
		} else {
			super.onBackPressed();
		}
	}
	
	@Override
	public boolean onNavigationItemSelected(@NonNull MenuItem item) {
		// Handle navigation view item clicks here.
		switch (item.getItemId()) {
			case R.id.menu_settings:
				startActivity(new Intent(MainActivity.this, SettingsActivity.class));
				break;
			case R.id.menu_bug:
				startActivity(new Intent(MainActivity.this, BugActivity.class));
				break;
			case R.id.menu_about:
				startActivity(new Intent(MainActivity.this, About.class));
				break;
			default:
				break;
		}
		drawer.closeDrawer(GravityCompat.START);
		return true;
	}
	
}
