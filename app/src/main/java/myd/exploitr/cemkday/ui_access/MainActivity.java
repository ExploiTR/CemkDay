package myd.exploitr.cemkday.ui_access;

import android.app.TimePickerDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.util.DisplayMetrics;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SwitchCompat;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScroller;
import androidx.recyclerview.widget.RecyclerView;

import com.andremion.floatingnavigationview.FloatingNavigationView;
import com.getkeepsafe.taptargetview.TapTarget;
import com.getkeepsafe.taptargetview.TapTargetSequence;
import com.github.lzyzsd.circleprogress.ArcProgress;
import com.github.lzyzsd.circleprogress.CircleProgress;
import com.github.lzyzsd.circleprogress.DonutProgress;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.snackbar.Snackbar;

import java.util.ArrayList;
import java.util.Calendar;

import myd.exploitr.cemkday.R;
import myd.exploitr.cemkday.attendance_objs.AttendanceAdapter;
import myd.exploitr.cemkday.attendance_objs.AttendanceData;
import myd.exploitr.cemkday.attendance_objs.AttendanceItem;
import myd.exploitr.cemkday.attendance_objs.AttendanceRecyclerView;
import myd.exploitr.cemkday.jobs.DailyWorker;
import myd.exploitr.cemkday.jobs.SupportService;
import myd.exploitr.cemkday.workers.DTM;

public class MainActivity extends AppCompatActivity
		implements NavigationView.OnNavigationItemSelectedListener {

	public static final String ATTENDANCE_ITEM = "atm";
	ArcProgress progress;
	DonutProgress donutProgress;
	CircleProgress circleProgress;
	AttendanceRecyclerView recyclerView;
	AttendanceAdapter adapter;
	FloatingNavigationView navigationView;
	ImageButton error, editMode, changeProgress;
	boolean autoScrollable = true;
	public static boolean SUB_EDITABLE = false;
	private boolean exit = false;
	private int MODE_PROGRESS = 0;
	private int PERCENTAGE_LOCAL = 55;
	private int COLOR_LOCAL = Color.WHITE;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		setupUI();
		setupConstraints();

		AttendanceData data;
		if (getIntent() != null) {
			data = (AttendanceData) getIntent().getSerializableExtra(ATTENDANCE_ITEM);
			if (data != null) {
				if (!data.isAvailable()) {
					new AlertDialog.Builder(MainActivity.this)
							.setTitle("Oops!")
							.setCancelable(false)
							.setMessage("Probably Attendance Data Not Available. Check out website & submit a bug report")
							.show();
					return;
				}
				setProgressLocal(
						(data.getHourObt(data.getSubLen() - 1) * 100) /
								data.getHourTotal(data.getSubLen() - 1));
				bindDataToViews(data);
			} else if ((data = DTM.getInstance(getBaseContext()).getLastSavedATD()) != null) {
				setProgressLocal(
						(data.getHourObt(data.getSubLen() - 1) * 100) /
								data.getHourTotal(data.getSubLen() - 1));
				bindDataToViews(data);
			} else {
				startActivity(new Intent(this, Splash.class));
				finish();
			}
		}
		if (DTM.getInstance(this).isCycleForcedEnabled()) {
			startService(new Intent(this, SupportService.class));
		} else if (DTM.getInstance(getBaseContext()).isCycleEnabled()) {
			DailyWorker.scheduleWork(this);
		}
	}

	private void bindDataToViews(AttendanceData data) {
		ArrayList<AttendanceItem> attendanceItems = new ArrayList<>();
		AttendanceData oldData = DTM.getInstance(getBaseContext()).getLastSavedATD();

		for (int i = 0; i < data.getSubLen(); i++) {
			attendanceItems.add(new AttendanceItem()
					.setSubject(oldData == null ? data.getSub(i) : oldData.getSub(i) == null ? data.getSub(i) : oldData.getSub(i)) //fix waaaaaaack!
					.setHoursTotal(data.getHourTotal(i))
					.setHoursObtained(data.getHourObt(i))
					.setPercentInPoint((float) data.getHourObt(i) / data.getHourTotal(i))
			);
			data.changeSub(i, oldData == null ? data.getSub(i) : oldData.getSub(i) == null ? data.getSub(i) : oldData.getSub(i));
		}
		recyclerView.setHasFixedSize(true);
		adapter = new AttendanceAdapter(this, attendanceItems);
		recyclerView.setAdapter(adapter);
		adapter.notifyDataSetChanged();

		Calendar calendar = Calendar.getInstance();
		error.setOnClickListener(cacheListener(calendar));

		if (data.isCached()) {
			//io
			setProgressTextColorLocal(Color.YELLOW);
			calendar.setTimeInMillis(DTM.getInstance(getBaseContext()).getLastCheckTimeStamp());

			//errorLevel notification
			error.setImageResource(R.drawable.ic_cached);
		} else {
			DTM.getInstance(getBaseContext()).setLastCheckTimeStamp(System.currentTimeMillis());
			DTM.getInstance(getBaseContext()).updateAttendanceData(data);
		}

		if (attendanceItems.get(attendanceItems.size() - 1).getPercentInPoint() < .75f) {
			//low attendance
			error.setImageResource(R.drawable.ic_low_attendance);
			error.setOnClickListener(lowAttendanceListener());
			setProgressTextColorLocal(Color.RED);
		}
	}

	void setProgressLocal(int progressX) {
		PERCENTAGE_LOCAL = progressX; //update
		checkVisibility();
		switch (MODE_PROGRESS) {
			case 0:
				progress.setProgress(progressX);
				break;
			case 1:
				circleProgress.setProgress(progressX);
				break;
			case 2:
				donutProgress.setProgress(progressX);
				break;
		}
	}

	void checkVisibility() {
		progress.setVisibility(MODE_PROGRESS == 0 ? View.VISIBLE : View.INVISIBLE);
		circleProgress.setVisibility(MODE_PROGRESS == 1 ? View.VISIBLE : View.INVISIBLE);
		donutProgress.setVisibility(MODE_PROGRESS == 2 ? View.VISIBLE : View.INVISIBLE);
	}

	void setProgressTextColorLocal(int colorLocal) {
		COLOR_LOCAL = colorLocal; //update
		checkVisibility();
		switch (MODE_PROGRESS) {
			case 0:
				progress.setTextColor(colorLocal);
				break;
			case 1:
				circleProgress.setTextColor(colorLocal);
				break;
			case 2:
				donutProgress.setTextColor(colorLocal);
				break;
		}
	}

	private View.OnClickListener lowAttendanceListener() {
		return v -> {
			if (!MainActivity.this.isFinishing()) {
				new AlertDialog.Builder(MainActivity.this)
						.setTitle("Low Attendance")
						.setMessage("As per University Rules, 75% attendance is the minimum required to sit for exam" +
								"\n\n! • Maintain proper attendance • !")
						.setPositiveButton("Understood", null)
						.show();
			}
		};
	}

	private View.OnClickListener cacheListener(Calendar calendar) {
		return v -> {
			if (!MainActivity.this.isFinishing()) {
				int hr = calendar.get(Calendar.HOUR_OF_DAY);
				int mn = calendar.get(Calendar.MINUTE);
				int sn = calendar.get(Calendar.SECOND);
				new AlertDialog.Builder(MainActivity.this)
						.setTitle("Limitations")
						.setMessage("Loading Cached Data from : " +
								(hr > 9 ? hr : "0" + hr) +
								":" +
								(mn > 9 ? mn : "0" + mn) +
								":" +
								(sn > 9 ? sn : "0" + sn) +
								"\n\n• To prevent unwanted spam, cyclical re-fetching of attendance data, data caching is implemented." +
								"\n\n• Also, no one is going to change attendance minute-by-minute. This will reduce server overhead too." +
								"\n\n• You can only refresh attendance data 24 times in a day with uniform time difference." +
								"\n\n• Additionally, the app checks the attendance at a specified certain time (Check Settings) and reports the changes." +
								"\n\n• The 'Circular Progress Text' will have yellow color when the result is cached. & red when you got less than 75% of attendance.")
						.setPositiveButton("Understood", null)
						.show();
			}
		};
	}

	private void setupConstraints() {
		if (DTM.getInstance(getBaseContext()).isNewUser()) {
			recyclerView.post(() -> {
				recyclerView.setLayoutManager(new LinearLayoutManager(MainActivity.this) {
					@Override
					public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {
						LinearSmoothScroller smoothScroller = new LinearSmoothScroller(MainActivity.this) {

							private static final float SPEED = 300f;// default=25f

							@Override
							protected float calculateSpeedPerPixel(DisplayMetrics displayMetrics) {
								return SPEED / displayMetrics.densityDpi;
							}

						};
						smoothScroller.setTargetPosition(position);
						startSmoothScroll(smoothScroller);
					}

					@Override
					public void onScrollStateChanged(int state) {
						if (state == RecyclerView.SCROLL_STATE_IDLE && autoScrollable) {
							recyclerView.smoothScrollToPosition(0); // ?
							autoScrollable = false;
							DTM.getInstance(getBaseContext()).setNewUserNoMore();
						}
						super.onScrollStateChanged(state);
					}
				});
				if (adapter != null) {
					recyclerView.smoothScrollToPosition(adapter.getItemCount() - 1);
				}
			});
			new Handler().postDelayed(() -> {
				if (!MainActivity.this.isFinishing()) {
					new AlertDialog.Builder(MainActivity.this)
							.setTitle("Notice")
							.setMessage("This app doesn't depend on any official API based services.\n" +
									"Sometimes it may not work as expected (Mostly for unexpected changes in website).\n" +
									"Thanks for your patience!")
							.setPositiveButton("OK", (dialogInterface, i) ->
									new TapTargetSequence(MainActivity.this)
									.target(TapTarget.forView(error, "Attendance Indicator",
											"This indicates your attendance status. White means not-cached and vice-versa." +
											"Yellow means >75% & Red means <75% ")
											.outerCircleColor(R.color.colorPrimaryAbout))
									.target(TapTarget.forView(editMode, "Subject Edit Mode",
											"After enabling edit mode, you can click on subject names (ex-CS402) and edit them (to \"C-Arch\")")
											.outerCircleColor(R.color.colorPrimaryAbout))
									.target(TapTarget.forView(changeProgress, "Change Progress View Mode",
											"Switch to different progressbar view mode, - ARC, Circular and Donut")
											.outerCircleColor(R.color.colorPrimaryAbout))
									.target(TapTarget.forView(navigationView, "Explore the app.")
											.tintTarget(false)
											.outerCircleColor(R.color.colorPrimaryAbout))
									.start())
							.show();
				}
			}, 3000);
		} else {
			recyclerView.post(() -> {
				recyclerView.setLayoutManager(new LinearLayoutManager(MainActivity.this) {
					@Override
					public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {
						LinearSmoothScroller smoothScroller = new LinearSmoothScroller(MainActivity.this) {

							private static final float SPEED = 300f;// default=25f

							@Override
							protected float calculateSpeedPerPixel(DisplayMetrics displayMetrics) {
								return SPEED / displayMetrics.densityDpi;
							}

						};
						smoothScroller.setTargetPosition(position);
						startSmoothScroll(smoothScroller);
					}

					@Override
					public void onScrollStateChanged(int state) {
					}
				});

				recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
					@Override
					public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
						if (dy > 0) {
							if (adapter != null) {
								recyclerView.smoothScrollToPosition(adapter.getItemCount());
							}
						} else if (dy < 0) {
							if (adapter != null) {
								recyclerView.smoothScrollToPosition(0);
							}
						}
						super.onScrolled(recyclerView, dx, dy);
					}
				});
			});
		}
	}

	private void setupUI() {
		Toolbar toolbar = findViewById(R.id.toolbar);
		setSupportActionBar(toolbar); //fix #46216551/8572503

		MODE_PROGRESS = DTM.getInstance(getBaseContext()).getProgressMode();

		progress = findViewById(R.id.arc_progress);
		donutProgress = findViewById(R.id.donut_progress);
		circleProgress = findViewById(R.id.circle_progress);

		recyclerView = findViewById(R.id.recyclerAtt);
		error = findViewById(R.id.error);
		editMode = findViewById(R.id.mode_edit);
		changeProgress = findViewById(R.id.mode_progress);

		editMode.setOnClickListener(v -> {
			editMode.setColorFilter(SUB_EDITABLE ? Color.WHITE : Color.GREEN);
			SUB_EDITABLE = !SUB_EDITABLE;
			if (!SUB_EDITABLE) {
				AttendanceData attendanceData = DTM.getInstance(getBaseContext()).getLastSavedATD();
				if (attendanceData != null) {
					bindDataToViews(attendanceData);
				}
			}
		});

		changeProgress.setOnClickListener(v -> {
			if (MODE_PROGRESS > 1)
				MODE_PROGRESS = 0;
			else
				MODE_PROGRESS += 1;
			DTM.getInstance(getBaseContext()).setProgressMode(MODE_PROGRESS);

			setProgressLocal(PERCENTAGE_LOCAL);
			setProgressTextColorLocal(COLOR_LOCAL);
		});

		navigationView = findViewById(R.id.nav_view);
		navigationView.setNavigationItemSelectedListener(this);
		navigationView.setOnClickListener(view -> navigationView.open());
		navigationView.show();

		toolbar.post(() -> toolbar.setSubtitle("Make Your Day At Cemk!"));
	}

	@Override
	public void onBackPressed() {
		if (navigationView.isOpened())
			navigationView.close();
		else {
			if (exit) {
				finish();
				return;
			}
			Snackbar.make(recyclerView, "Press Back Again To Exit", Snackbar.LENGTH_SHORT)
					.setTextColor(Color.WHITE)
					.show();
			exit = true;
		}
	}

	@Override
	public boolean onNavigationItemSelected(@NonNull MenuItem item) {
		// Handle navigation view item clicks here.
		switch (item.getItemId()) {
			case R.id.menu_settings:
				showSettings();
				break;
			case R.id.menu_bug:
				startActivity(new Intent(MainActivity.this, BugActivity.class));
				break;
			case R.id.menu_about:
				startActivity(new Intent(MainActivity.this, About.class));
				break;
			case R.id.menu_logout:
				DTM.getInstance(this).reset();
				startActivity(new Intent(this, Splash.class));
				finish();
				break;
		}
		return true;
	}

	private void showSettings() {
		if (navigationView.isOpened())
			navigationView.close();
		View settings_view = getLayoutInflater().inflate(R.layout.settings_diag, null);
		SwitchCompat daily_chk = settings_view.findViewById(R.id.daily_chk),
				force_chk = settings_view.findViewById(R.id.force_chk);
		TextView timeRes = settings_view.findViewById(R.id.timeText);
		Button changeTime = settings_view.findViewById(R.id.changeTime),
				restart_service = settings_view.findViewById(R.id.startService);

		TimePickerDialog dialog;

		timeRes.setText(time(DTM.getInstance(getBaseContext()).getCycleT_Hour(), DTM.getInstance(getBaseContext()).getCycleT_Min()));

		dialog = new TimePickerDialog(this, R.style.AppTheme_SettingsActivity_TimePicker, (view, hourOfDay, minute) -> {
			timeRes.setText(time(hourOfDay, minute));
			DTM.getInstance(getBaseContext()).setCycleT_Hour(hourOfDay);
			DTM.getInstance(getBaseContext()).setCycleT_Min(minute);
		}, DTM.getInstance(getBaseContext()).getCycleT_Hour(), DTM.getInstance(getBaseContext()).getCycleT_Min(), true);

		daily_chk.setChecked(DTM.getInstance(getBaseContext()).isCycleEnabled());
		force_chk.setChecked(DTM.getInstance(getBaseContext()).isCycleForcedEnabled());

		daily_chk.setOnCheckedChangeListener((buttonView, isChecked) -> {
			if (!isChecked)
				force_chk.setChecked(false);
			DTM.getInstance(getBaseContext()).setCycleState(isChecked);
			if (SupportService.RUNNING) {
				stopService(new Intent(this, SupportService.class));
				restart_service.setText(R.string._start);
			}
		});
		force_chk.setOnCheckedChangeListener((buttonView, isChecked) -> {
			if (isChecked)
				daily_chk.setChecked(true);
			DTM.getInstance(getBaseContext()).setCycleForcedState(isChecked);
			if (SupportService.RUNNING) {
				stopService(new Intent(this, SupportService.class));
				restart_service.setText(R.string._start);
			}
		});

		changeTime.setOnClickListener(v -> dialog.show());

		if (SupportService.RUNNING)
			restart_service.setText(R.string._stop);
		restart_service.setOnClickListener(v -> {
			if (SupportService.RUNNING) {
				stopService(new Intent(this, SupportService.class));
				restart_service.setText(R.string._start);
				Toast.makeText(this, "Attendance Report Disabled", Toast.LENGTH_SHORT).show();
			} else {
				if (DTM.getInstance(this).isCycleForcedEnabled()) {
					startService(new Intent(this, SupportService.class));
					restart_service.setText(R.string._stop);
					Toast.makeText(this, "Force Mode Attendance Report Enabled", Toast.LENGTH_SHORT).show();
				}
				if (DTM.getInstance(getBaseContext()).isCycleEnabled() && !DTM.getInstance(getBaseContext()).isCycleForcedEnabled()) {
					DailyWorker.scheduleWork(this);
					Toast.makeText(this, "Attendance Report Enabled", Toast.LENGTH_SHORT).show();
				} else {
					Toast.makeText(this, "Enable Attendance Report", Toast.LENGTH_SHORT).show();
				}
			}
		});

		AlertDialog dialogX = new AlertDialog.Builder(this, R.style.AppTheme_SettingsActivity)
				.setView(settings_view).create();
		if (!this.isFinishing())
			dialogX.show();
	}

	private static String time(int hr, int min) {
		String rex;
		if (hr < 10) {
			rex = "0" + hr + ":";
		} else {
			rex = hr + ":";
		}
		if (min < 10) {
			rex = rex + "0" + min;
		} else {
			rex = rex + min;
		}
		return rex;
	}

}
